(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var cards = document.querySelector('#js-adv-cards');

(function () {
  var state = {
    threshold: {
      bottom: 50,
      //на каком расстоянии от нижней кромки хотим увидеть
      top: 50,
      translateY: parseFloat(getComputedStyle(cards.children[0]).transform.split(',')[5]) //вернуть позицию сдвига

    },
    delay: parseFloat(getComputedStyle(cards.children[0]).transitionDuration),
    total: 0,
    visibilityReact: false
  };
  document.addEventListener('scroll', checkedCard);

  function checkedCard(ev) {
    _toConsumableArray(cards.children).forEach(function (card, inx) {
      state.visibilityReact = checkVisible(card, state.threshold);

      if (!card.classList.contains('card--active') && state.visibilityReact) {
        state.total += state.delay / (inx + 1);
        card.style.transitionDuration = state.total.toFixed(2) + 's';
        card.style.transitionDelay = (state.total / 3).toFixed(2) + 's';
        card.classList.add('card--active');
      }

      if (card.classList.contains('card--active') && !state.visibilityReact) {
        state.total = 0;
        state.visibilityReact = false;
        card.classList.remove('card--active');
      }
    });
  }

  function checkVisible(el) {
    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      bottom: 0,
      top: 0,
      translateY: 0
    };
    var top = el.getBoundingClientRect().top;
    var bottom = el.getBoundingClientRect().bottom;

    if (top - threshold.translateY + threshold.bottom - window.innerHeight <= 0 || bottom + threshold.bottom < 0) {
      return true;
    } else return false;
  }
})();

},{}],2:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Element.prototype.createCount = function () {
  var nameClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var maxCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    tag: '',
    element: ''
  };
  var tag = option.tag ? option.tag : 'span';
  this.countClassName = nameClass;
  this.maxCount = maxCount;
  this.constructor.prototype.updateCount = updateCount;
  var el = "<".concat(tag, " class=").concat(nameClass, " >").concat(this.value.length, "/").concat(maxCount, "</").concat(tag, ">");

  if (_typeof(option.element) === 'object') {
    option.element.insertAdjacentHTML('afterend', el);
    this.countTarget = option.element;
    return;
  }

  this.insertAdjacentHTML('afterend', el);
};

function updateCount() {
  var countTarget = this.countTarget ? this.countTarget.nextElementSibling : this.nextElementSibling;
  countTarget.textContent = "".concat(this.value.length, "/").concat(this.maxCount);
}

},{}],3:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var header = document.querySelector('.header');

if (header.clientWidth < 768) {
  var btnMenu = "<div class=\"btn-burger\">\n      <i class=\"btn-burger__item\"></i>\n      <i class=\"btn-burger__item\"></i>\n      <i class=\"btn-burger__item\"></i>\n    </div>";
  header.insertAdjacentHTML("beforeend", btnMenu);
  var headerBtnMenu = document.querySelector('.btn-burger');
  headerBtnMenu.addEventListener('click', toggleMenu);
}

function toggleMenu(ev) {
  this.parentNode.children[0].classList.toggle('header__items--active');
  this.parentNode.classList.toggle('header--active');

  _toConsumableArray(this.children).forEach(function (burgerItem) {
    burgerItem.classList.toggle('btn-burger__item--active');
  });
}

},{}],4:[function(require,module,exports){
"use strict";

var _slider = _interopRequireDefault(require("./slider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.onload = function () {
  (0, _slider.default)();
};

},{"./slider":11}],5:[function(require,module,exports){
"use strict";

var imageIst = document.querySelectorAll('.inst__slider-item');
var imgOption = {
  root: document.querySelector('.inst__sliders'),

  /* должен быть предком. по умолчанию окно браузера */
  rootMargin: '0px 500px 0px 0px',

  /*Отступы вокруг root.  */
  threshold: .05
  /* число от 0-1. это насколько процентов должен быть видео объект при котором
     должна отработать callback функция. Можно даж массив передать. [0, 0.25, 0.5, 0.75, 1] */

};
var imgObserver = new IntersectionObserver(function (entries, imgObserver) {
  entries.forEach(function (_ref) {
    var target = _ref.target,
        isIntersecting = _ref.isIntersecting;

    if (!isIntersecting) {
      /*элементы не пересекают границу. false */
      return;
    }

    target.src = target.getAttribute("data-src");
    imgObserver.unobserve(target);
  });
}, imgOption);
imageIst.forEach(function (item) {
  imgObserver.observe(item);
});

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.popup = popup;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function popup(popupEl, btnOpen) {
  var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    noBlockEl: '',
    scrollOff: false,
    opened: '',
    closing: ''
  };
  var close = popupEl.querySelector("#".concat(popupEl.id, "-close"));
  var saveScrollToTheOpen;
  btnOpen.addEventListener('click', openPrice);
  popupEl.addEventListener('click', closePrice);

  function openPrice(ev) {
    popupEl.style.display = "flex";
    saveScrollToTheOpen = window.scrollY;
    lockScroll();

    if (typeof option.opened == 'function') {
      option.opened();
    }
  }

  function closePrice(ev) {
    if (ev.target == popupEl || ev.target == close) {
      popupEl.style.display = "none";
      unlockScroll();

      if (typeof option.closing == 'function') {
        option.closing();
      }
    }
  }
  /*#######---------<{ Control Scroll}>---------##########*/


  function lockScroll() {
    window.addEventListener('wheel', evWheel, {
      passive: false
    });
    window.addEventListener('scroll', evScroll);
  }

  function unlockScroll() {
    window.removeEventListener('wheel', evWheel, {
      passive: false
    });
    window.removeEventListener('scroll', evScroll);
  }

  function evWheel(ev) {
    if (_typeof(option.noBlockEl) == 'object') {
      if (!option.noBlockEl.contains(ev.target)) {
        ev.preventDefault();
        return;
      }
    } else if (option.scrollOff) {
      ev.preventDefault();
      return;
    }

    console.dir("evWheel");
    this.scrollTo(0, saveScrollToTheOpen);
  }

  function evScroll(ev) {
    console.dir("evScroll");
    this.scrollTo(0, saveScrollToTheOpen);
  }
}

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preloaderTable = preloaderTable;

function preloaderTable() {
  return "<div id=\"preloader\">\n            <div id=\"loader\"></div>\n          </div>";
}

},{}],8:[function(require,module,exports){
"use strict";

var _preloader = require("./preloader");

var _popup = require("./popup");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _location = location,
    protocol = _location.protocol,
    host = _location.host;
var priceBtn = document.querySelector('#js-popup-pl-open');
var priceList = document.querySelector('#js-popup-pl');
var priceTable = document.querySelector('#js-p-table');
var tableBody = document.querySelector('#js-p-tableBody');
(0, _popup.popup)(priceList, priceBtn, {
  noBlockEl: priceTable,
  opened: ajaxRequestTable
});
/*########---------<{ Main Function }>---------#########*/

console.dir("".concat(protocol, "//").concat(host, "/table"));

function ajaxRequestTable() {
  if (!tableBody.children.length) {
    tableBody.innerHTML = (0, _preloader.preloaderTable)();
    fetch("".concat(protocol, "//").concat(host, "/table")).then(function (data) {
      return data.json();
    }).then(function (data) {
      tableBody.innerHTML = '';
      renderTable(data);
    }).then(function () {
      hangTheFunctionality();
    }).catch(function (err) {
      tableBody.textContent = err;
    });
  } else console.dir('Данные уже загружены');
}
/*#######------<{ renderTable and hangTheFunctionality }>--------#######*/


function renderTable(data) {
  var _iterator = _createForOfIteratorHelper(data),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var arrTables = _step.value;

      if (Number(arrTables.id) === 1) {
        tableBody.innerHTML += "<tr class=\"price-list__row-head-title\" >\n        <th class=\"price-list__cell-head-title\" colspan=\"4\">".concat(arrTables.services, "</th>\n      </tr>\n        <tr class=\"price-list__row-info\" >\n          <td class=\"price-list__cell-info\">\u041D\u0430\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u043D\u0438\u0435</td>\n          <td class=\"price-list__cell-info\">\u0415\u0434.\u0438\u0437\u043C.</td>\n          <td class=\"price-list__cell-info\">\u0426\u0435\u043D\u0430(\u0440\u0443\u0431.)</td>\n          <td class=\"price-list__cell-info\">\u041A\u043E\u043B-\u0432\u043E</td>\n          <td class=\"price-list__cell-info\">\u0421\u0443\u043C\u043C\u0430</td>\n        </tr>");
      } else {
        tableBody.innerHTML += "<tr class=\"price-list__row\">\n        <td class=\"price-list__cell\">".concat(arrTables.services, "</td>\n        <td class=\"price-list__cell\">").concat(arrTables.unit, "</td>\n        <td class=\"price-list__cell js-p-rub\">").concat(arrTables.price, "</td>\n        <td class=\"price-list__cell\">\n          <input class=\"price-list__input js-p-input\" type=\"text\" name=\"dataCell\">\n        </td>\n        <td class=\"price-list__cell js-p-sum\">0</td>\n      </tr>");
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function hangTheFunctionality() {
  var priceRublesCell = document.querySelectorAll('.js-p-rub');
  var priceInputCells = document.querySelectorAll('.js-p-input');
  var priceSumCell = document.querySelectorAll('.js-p-sum');
  var priceResult = document.querySelector('#js-p-result');
  var arrNumbers = [];
  priceInputCells.forEach(function (item, inx) {
    item.addEventListener('input', changeInput.bind(item, inx));
  });

  function changeInput(inx, ev) {
    this.value = this.value.replace(/\D/g, ''); //blocking character input
    //заперли inx в замыкании привязав input к индексам массива.

    priceSumCell[inx].textContent = arrNumbers[inx] = getSumInputs(this.value, inx);
    priceResult.textContent = getResult(arrNumbers);
  }

  function getSumInputs(val, inx) {
    return +priceRublesCell[inx].textContent * +val;
  }

  function getResult(arr) {
    return arr.reduce(function (prev, num) {
      return prev += +num;
    }, 0);
  }
}

},{"./popup":6,"./preloader":7}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.state = void 0;

var _state;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var inputName = document.querySelector('#js-m-name');
var inputPhone = document.querySelector('#js-m-phone');
var textArea = document.querySelector('#js-m-textarea');
var state = (_state = {}, _defineProperty(_state, inputName.name, {
  min: 2,
  max: 15,
  status: false,
  length: 0,
  value: ''
}), _defineProperty(_state, inputPhone.name, {
  min: 18,
  max: 18,
  status: false,
  length: 0,
  value: ''
}), _defineProperty(_state, textArea.name, {
  min: 10,
  max: 400,
  status: false,
  length: 0,
  value: ''
}), _state);
exports.state = state;
[inputName, inputPhone, textArea].forEach(function (item) {
  item.addEventListener('input', checkInAll);
});
textArea.createCount('mail-popup__form-count', state[textArea.name].max, {
  element: textArea.parentElement
});

function checkInAll(ev) {
  ev.preventDefault();

  if (this === inputName || this === textArea) {
    this.value = this.value.replace(/[%<>&]|(script)/g, '');
    if (this === textArea) this.updateCount();
  }

  if (this == inputPhone) maskInput(this, ev);
  maxMin(this);
}

function maxMin(el) {
  var stateItem = state[el.name];

  if (el.value.length >= stateItem.min && stateItem.length <= stateItem.max) {
    stateItem.status = true;
    el.style.animationName = 'glowInputSuccess';
  } else {
    stateItem.status = false;
    el.style.animationName = 'glowInputError';
  }

  if (el.value.length > stateItem.max) {
    el.value = el.value.slice(0, stateItem.max);
  } else {
    stateItem.length = el.value.length;
    stateItem.value = el.value;
  }
}

function maskInput(el, ev) {
  var input = el;
  var mask = input.dataset.mask;
  var value = input.value;
  var literalPattern = /[0\*]/;
  var numberPattern = /[0-9]/gi; //+7 (000) 000-00-00//\+7\s\(9\d{2}\)\s\d{3}-\d{2}-\d{2}

  var newValue = "";

  if (/\D/.test(ev.data)) {
    el.value = el.value.replace(ev.data, '');
    return;
  }

  try {
    var maskLength = mask.length;
    var valueIndex = 0;
    var maskIndex = 0;

    for (; maskIndex < maskLength;) {
      if (maskIndex >= value.length) break;
      if (mask[maskIndex] === "0" && value[valueIndex].match(numberPattern) === null) break; // Found a literal

      while (mask[maskIndex].match(literalPattern) === null) {
        if (value[valueIndex] === mask[maskIndex]) break;
        newValue += mask[maskIndex++];
      }

      newValue += value[valueIndex++];
      maskIndex++;
    }

    input.value = newValue;
  } catch (e) {
    console.log(e);
  }
} //^[+\d]*[(]\d{3}[)]\d{3}-\d{2}-\d{2}/g

},{}],10:[function(require,module,exports){
"use strict";

var _popup = require("../popup");

var _checkIn = require("./check-in");

var _location = location,
    protocol = _location.protocol,
    hostname = _location.hostname;
var popupMail = document.querySelector('#js-popup-mail');
var popupOpen = document.querySelector('#js-popup-mail-open');
var mailForm = document.querySelector('#js-m-form');
(0, _popup.popup)(popupMail, popupOpen, {
  scrollOff: true,
  closing: resetForm
});
mailForm.addEventListener('submit', sendMail);

function sendMail(ev) {
  ev.preventDefault();

  if (!Object.values(_checkIn.state).every(function (item) {
    return item.status;
  })) {
    return;
  }

  fetch("".concat(protocol, "//").concat(hostname, "/mail"), {
    method: 'POST',
    body: new FormData(this)
  }).then(function (data) {
    return data.json();
  }).then(function (data) {
    success(JSON.stringify(data));
  }).catch(function (err) {
    console.dir(err);
  });
}

var msg = "<div class=\"mail-popup__form-success-msg\">\u041F\u0438\u0441\u044C\u043C\u043E \u0434\u043E\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u043E</div>";

function success(data) {
  console.info(data);
  mailForm.classList.add('mail-popup__form--success');
  var timing = parseFloat(getComputedStyle(mailForm).transitionDuration);
  setTimeout(function () {
    mailForm.insertAdjacentHTML('afterend', msg); //JSON.stringify(data)
  }, timing * 1000);
}

function resetForm() {
  var elSuccessMsg = mailForm.nextElementSibling;

  if (elSuccessMsg && elSuccessMsg.matches('.mail-popup__form-success-msg')) {
    mailForm.parentElement.removeChild(elSuccessMsg);
    mailForm.classList.remove('mail-popup__form--success');

    for (var i = 0; i < mailForm.length - 1; i++) {
      mailForm[i].value = '';

      if (mailForm[i].updateCount) {
        console.info('Счётчик Сброшен');
        mailForm[i].updateCount();
      }
    }
  }
}

},{"../popup":6,"./check-in":9}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _default() {
  var multiItemSlider = function () {
    Element.prototype.c_querySelector = function (selectOrRegExp) {
      var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (selectOrRegExp.constructor === RegExp.prototype.constructor && flag) {
        return _toConsumableArray(this.children).find(function (item) {
          return selectOrRegExp.test(item.className);
        });
      } else {
        return this.querySelector(selectOrRegExp);
      }
    };

    Element.prototype.c_querySelectorAll = function (selectOrRegExp) {
      var flag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (selectOrRegExp.constructor === RegExp.prototype.constructor && flag) {
        return _toConsumableArray(this.children).filter(function (item) {
          return selectOrRegExp.test(item.className);
        });
      } else {
        return this.querySelectorAll(selectOrRegExp);
      }
    };

    function _isElementVisible(element) {
      // возможно потребуется установить элементу z-index:0
      var rect = element.getBoundingClientRect(),
          vWidth = window.innerWidth || doc.documentElement.clientWidth,
          vHeight = window.innerHeight || doc.documentElement.clientHeight,
          elemFromPoint = function elemFromPoint(x, y) {
        return document.elementFromPoint(x, y);
      };

      if (rect.right < 0 || rect.bottom < 0 || rect.left > vWidth || rect.top > vHeight) return false;
      return element.contains(elemFromPoint(rect.left, rect.top)) || element.contains(elemFromPoint(rect.right, rect.top)) || element.contains(elemFromPoint(rect.right, rect.bottom)) || element.contains(elemFromPoint(rect.left, rect.bottom));
    }

    return function (selector, config) {
      var _mainElement = document.querySelector(selector),
          _sliderWrapper = _mainElement.c_querySelector(/.+items/, true),
          _sliderItems = _sliderWrapper.c_querySelectorAll(/.+item/, true),
          _sliderControls = _mainElement.c_querySelectorAll(/.+control/, true),
          _sliderControlLeft = _mainElement.c_querySelector(/.+control_left/, true),
          _sliderControlRight = _mainElement.c_querySelector(/.+control_right/, true),
          _wrapperWidth = parseFloat(getComputedStyle(_sliderWrapper).width),
          _itemWidth = parseFloat(getComputedStyle(_sliderItems[0]).width),
          _html = _mainElement.innerHTML;

      var _indexIndicator = 0,
          _maxIndexIndicator = _sliderItems.length - 1,
          _indicatorItems,
          _positionLeftItem = 0,
          _transform = 0,
          _step = _itemWidth / _wrapperWidth * 100,
          _items = [],
          _interval = 0,
          _states = [{
        active: false,
        minWidth: 0,
        count: 1
      }, {
        active: false,
        minWidth: 576,
        count: 2
      }, {
        active: false,
        minWidth: 992,
        count: 3
      }, {
        active: false,
        minWidth: 1200,
        count: 4
      }],
          _config = {
        isCycling: false,
        direction: 'right',
        interval: 5000,
        pause: true
      };

      for (var key in config) {
        if (key in _config) {
          _config[key] = config[key];
        }
      }

      _sliderItems.forEach(function (item, index) {
        _items.push({
          item: item,
          position: index,
          transform: 0
        });
      });

      var _setActive = function _setActive() {
        var _index = 0;
        var width = parseFloat(document.body.clientWidth);

        _states.forEach(function (item, index, arr) {
          _states[index].active = false;
          if (width >= _states[index].minWidth) _index = index;
        });

        _states[_index].active = true;
      };

      var _getActive = function _getActive() {
        var _index;

        _states.forEach(function (item, index, arr) {
          if (_states[index].active) {
            _index = index;
          }
        });

        return _index;
      };

      var position = {
        getItemMin: function getItemMin() {
          var indexItem = 0;

          _items.forEach(function (item, index) {
            if (item.position < _items[indexItem].position) {
              indexItem = index;
            }
          });

          return indexItem;
        },
        getItemMax: function getItemMax() {
          var indexItem = 0;

          _items.forEach(function (item, index) {
            if (item.position > _items[indexItem].position) {
              indexItem = index;
            }
          });

          return indexItem;
        },
        getMin: function getMin() {
          return _items[position.getItemMin()].position;
        },
        getMax: function getMax() {
          return _items[position.getItemMax()].position;
        }
      };

      var _transformItem = function _transformItem(direction) {
        var nextItem,
            currentIndicator = _indexIndicator; // console.dir(_isElementVisible(_mainElement)); 
        // if (!_isElementVisible(_mainElement)) {
        //   return;
        // }

        if (direction === 'right') {
          _positionLeftItem++;

          if (_positionLeftItem + _wrapperWidth / _itemWidth - 1 > position.getMax()) {
            nextItem = position.getItemMin();
            _items[nextItem].position = position.getMax() + 1;
            _items[nextItem].transform += _items.length * 100;
            _items[nextItem].item.style.transform = 'translateX(' + _items[nextItem].transform + '%)';
          }

          _transform -= _step;
          _indexIndicator = _indexIndicator + 1;

          if (_indexIndicator > _maxIndexIndicator) {
            _indexIndicator = 0;
          }
        }

        if (direction === 'left') {
          _positionLeftItem--;

          if (_positionLeftItem < position.getMin()) {
            nextItem = position.getItemMax();
            _items[nextItem].position = position.getMin() - 1;
            _items[nextItem].transform -= _items.length * 100;
            _items[nextItem].item.style.transform = 'translateX(' + _items[nextItem].transform + '%)';
          }

          _transform += _step;
          _indexIndicator = _indexIndicator - 1;

          if (_indexIndicator < 0) {
            _indexIndicator = _maxIndexIndicator;
          }
        }

        _sliderWrapper.style.transform = 'translateX(' + _transform + '%)';

        _indicatorItems[currentIndicator].classList.remove('active');

        _indicatorItems[_indexIndicator].classList.add('active');
      };

      var _slideTo = function _slideTo(to) {
        var i = 0,
            direction = to > _indexIndicator ? 'right' : 'left';

        while (to !== _indexIndicator && i <= _maxIndexIndicator) {
          _transformItem(direction);

          i++;
        }
      };

      var _cycle = function _cycle(direction) {
        if (!_config.isCycling) {
          return;
        }

        _interval = setInterval(function () {
          _transformItem(direction);
        }, _config.interval);
      };

      var _controlClick = function _controlClick(e) {
        if (e.target.classList.contains('slider__control')) {
          e.preventDefault();
          var direction = e.target.classList.contains('slider__control_right') ? 'right' : 'left';

          _transformItem(direction);

          clearInterval(_interval);

          _cycle(_config.direction);
        }

        if (e.target.getAttribute('data-slide-to')) {
          e.preventDefault();

          _slideTo(parseInt(e.target.getAttribute('data-slide-to')));

          clearInterval(_interval);

          _cycle(_config.direction);
        }
      };

      var _handleVisibilityChange = function _handleVisibilityChange() {
        if (document.visibilityState === "hidden") {
          clearInterval(_interval);
        } else {
          clearInterval(_interval);

          _cycle(_config.direction);
        }
      };

      var _refresh = function _refresh() {
        clearInterval(_interval);
        _mainElement.innerHTML = _html;
        _sliderWrapper = _mainElement.c_querySelector(/.+items/, true);
        _sliderItems = _sliderWrapper.c_querySelectorAll(/.+item/, true);
        _sliderControls = _mainElement.c_querySelectorAll(/.+control/, true);
        _sliderControlLeft = _mainElement.c_querySelector(/.+control_left/, true);
        _sliderControlRight = _mainElement.c_querySelector(/.+control_right/, true);
        _wrapperWidth = parseFloat(getComputedStyle(_sliderWrapper).width);
        _itemWidth = parseFloat(getComputedStyle(_sliderItems[0]).width);
        _positionLeftItem = 0;
        _transform = 0;
        _indexIndicator = 0;
        _maxIndexIndicator = _sliderItems.length - 1;
        _step = _itemWidth / _wrapperWidth * 100;
        _items = [];

        _sliderItems.forEach(function (item, index) {
          _items.push({
            item: item,
            position: index,
            transform: 0
          });
        });

        _addIndicators();
      };

      var _setUpListeners = function _setUpListeners() {
        _mainElement.addEventListener('click', _controlClick);

        if (_config.pause && _config.isCycling) {
          _mainElement.addEventListener('mouseenter', function () {
            clearInterval(_interval);
          });

          _mainElement.addEventListener('mouseleave', function () {
            clearInterval(_interval);

            _cycle(_config.direction);
          });
        }

        document.addEventListener('visibilitychange', _handleVisibilityChange, false);
        window.addEventListener('resize', function () {
          var _index = 0,
              width = parseFloat(document.body.clientWidth);

          _states.forEach(function (item, index, arr) {
            if (width >= _states[index].minWidth) _index = index;
          });

          if (_index !== _getActive()) {
            _setActive();

            _refresh();
          }
        });
      };

      var _addIndicators = function _addIndicators() {
        var sliderIndicators = document.createElement('ol');
        sliderIndicators.classList.add(selector.split('__')[0].slice(1) + '__indicators');

        for (var i = 0; i < _sliderItems.length; i++) {
          var sliderIndicatorsItem = document.createElement('li');

          if (i === 0) {
            sliderIndicatorsItem.classList.add('active');
          }

          sliderIndicatorsItem.setAttribute("data-slide-to", i);
          sliderIndicators.appendChild(sliderIndicatorsItem);

          _sliderWrapper.insertAdjacentElement("afterend", sliderIndicators);
        } // console.dir(sliderIndicators);
        // _mainElement.appendChild(sliderIndicators);


        _indicatorItems = _mainElement.querySelectorAll(selector.split('__')[0] + '__indicators > li');
      }; // добавляем индикаторы


      _addIndicators(); // инициализация


      _setUpListeners();

      if (document.visibilityState === "visible") {
        _cycle(_config.direction);
      }

      _setActive();

      return {
        right: function right() {
          _transformItem('right');
        },
        left: function left() {
          _transformItem('left');
        },
        stop: function stop() {
          _config.isCycling = false;
          clearInterval(_interval);
        },
        cycle: function cycle() {
          _config.isCycling = true;
          clearInterval(_interval);

          _cycle();
        }
      };
    };
  }();

  var slider = multiItemSlider('.slider', {
    isCycling: true,
    interval: 8000
  });
  var instSlider1 = multiItemSlider('.inst__slider--1', {
    isCycling: true,
    interval: 5000
  });
  var instSlider2 = multiItemSlider('.inst__slider--2', {
    isCycling: true,
    interval: 5000
  });
  var instSlider3 = multiItemSlider('.inst__slider--3', {
    isCycling: true,
    interval: 5000
  });
  var instSlider4 = multiItemSlider('.inst__slider--4', {
    isCycling: true,
    interval: 5000
  });
}

},{}]},{},[1,2,3,4,5,6,7,8,9,10,11])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
